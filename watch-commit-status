#!/usr/bin/env bash

set -euo pipefail

_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Cache head commit to avoid breaking when the user makes a new commit on the branch locally
head="$(git rev-parse HEAD)"
api_url="/repos/{owner}/{repo}/commits/${head}/status"

get_state() {
	gh api --cache="5s" --jq='.state' "$api_url"
}

state="$(get_state)"
"$_dir"/print-commit-status

while [ "$state" = 'pending' ]; do
	sleep 5
	# Cache response so that we can immediately make the same request again with different output formatting
	if ! state="$(get_state)"; then
		echo 'error: failed to get commit state'
		exit 1
	fi

	if ! [ "$state" = 'pending' ]; then
		# Account for gaps in status check execution by checking again
		sleep 5
		state="$(get_state)"
		if ! [ "$state" = 'pending' ]; then
			break
		fi
	fi

	tput clear

	"$_dir"/print-commit-status
done

project="$(basename "$(pwd)")"

if [ "$state" = 'success' ]; then
	message="CI for $project succeeded."
elif [ "$state" = 'failure' ]; then
	message="CI for $project failed."
else
	message="Something unexpected happened in CI for $project."
fi

if [[ "$OSTYPE" == darwin* ]]; then
	osascript -e "display notification \"$message\" with title \"gh-watch\""
elif [[ $OSTYPE == *linux* ]]; then
	if command -v notify-send >/dev/null; then
		notify-send 'gh-watch' "$message"
	else
		echo -e 'warning: failed to create an OS-level notification with "notify-send", you may need to install \e]8;;https://gitlab.gnome.org/GNOME/libnotify\e\\libnotify-bin\e]8;;\e\\ '
	fi
fi
